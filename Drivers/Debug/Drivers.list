
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000630  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800073c  08000744  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800073c  0800073c  00010744  2**0
                  CONTENTS
  4 .ARM          00000000  0800073c  0800073c  00010744  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800073c  08000744  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800073c  0800073c  0001073c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000740  08000740  00010740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000744  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000744  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010744  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001076d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f7d  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000739  00000000  00000000  0001172d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  00011e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e5  00000000  00000000  00012120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014860  00000000  00000000  00012305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022ca  00000000  00000000  00026b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a38e  00000000  00000000  00028e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000820  00000000  00000000  000a31c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a39e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000724 	.word	0x08000724

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000724 	.word	0x08000724

0800014c <EXTI0_IRQHandler>:
    EXTI_callback[copy_u8Line] = ptr;
}


void EXTI0_IRQHandler (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    EXTI_callback[0]();
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <EXTI0_IRQHandler+0x1c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 0);
 8000156:	4b05      	ldr	r3, [pc, #20]	; (800016c <EXTI0_IRQHandler+0x20>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a04      	ldr	r2, [pc, #16]	; (800016c <EXTI0_IRQHandler+0x20>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
}
 8000162:	bf00      	nop
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	2000001c 	.word	0x2000001c
 800016c:	40010400 	.word	0x40010400

08000170 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    EXTI_callback[1]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI1_IRQHandler+0x1c>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 1);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI1_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI1_IRQHandler+0x20>)
 8000180:	f043 0302 	orr.w	r3, r3, #2
 8000184:	6153      	str	r3, [r2, #20]
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	2000001c 	.word	0x2000001c
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    EXTI_callback[2]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI2_IRQHandler+0x1c>)
 800019a:	689b      	ldr	r3, [r3, #8]
 800019c:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 2);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI2_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI2_IRQHandler+0x20>)
 80001a4:	f043 0304 	orr.w	r3, r3, #4
 80001a8:	6153      	str	r3, [r2, #20]
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
    EXTI_callback[3]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI3_IRQHandler+0x1c>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 3);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI3_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI3_IRQHandler+0x20>)
 80001c8:	f043 0308 	orr.w	r3, r3, #8
 80001cc:	6153      	str	r3, [r2, #20]
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
    EXTI_callback[4]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI4_IRQHandler+0x1c>)
 80001e2:	691b      	ldr	r3, [r3, #16]
 80001e4:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 4);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI4_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI4_IRQHandler+0x20>)
 80001ec:	f043 0310 	orr.w	r3, r3, #16
 80001f0:	6153      	str	r3, [r2, #20]
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	40010400 	.word	0x40010400

08000200 <delay>:

    return result;
}

void delay(u16 time)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	80fb      	strh	r3, [r7, #6]
	  for(u16 i=0;i<time;i++)
 800020a:	2300      	movs	r3, #0
 800020c:	81fb      	strh	r3, [r7, #14]
 800020e:	e00d      	b.n	800022c <delay+0x2c>
	  {
		  for (u16 j=0;j<time;j++)
 8000210:	2300      	movs	r3, #0
 8000212:	81bb      	strh	r3, [r7, #12]
 8000214:	e003      	b.n	800021e <delay+0x1e>
		  {
			  asm("NOP");
 8000216:	bf00      	nop
		  for (u16 j=0;j<time;j++)
 8000218:	89bb      	ldrh	r3, [r7, #12]
 800021a:	3301      	adds	r3, #1
 800021c:	81bb      	strh	r3, [r7, #12]
 800021e:	89ba      	ldrh	r2, [r7, #12]
 8000220:	88fb      	ldrh	r3, [r7, #6]
 8000222:	429a      	cmp	r2, r3
 8000224:	d3f7      	bcc.n	8000216 <delay+0x16>
	  for(u16 i=0;i<time;i++)
 8000226:	89fb      	ldrh	r3, [r7, #14]
 8000228:	3301      	adds	r3, #1
 800022a:	81fb      	strh	r3, [r7, #14]
 800022c:	89fa      	ldrh	r2, [r7, #14]
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	429a      	cmp	r2, r3
 8000232:	d3ed      	bcc.n	8000210 <delay+0x10>
		  }
	  }
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <GPIO_voidSetPinDir>:
#include "GPIO_interface.h"
#include "GPIO_private.h"
#include "GPIO_config.h"

void GPIO_voidSetPinDir(u8 Copy_PORT, u8 Copy_PIN, u8 Copy_Mode)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	460b      	mov	r3, r1
 800024c:	71bb      	strb	r3, [r7, #6]
 800024e:	4613      	mov	r3, r2
 8000250:	717b      	strb	r3, [r7, #5]
	switch(Copy_PORT)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d07a      	beq.n	800034e <GPIO_voidSetPinDir+0x10e>
 8000258:	2b02      	cmp	r3, #2
 800025a:	f300 80b1 	bgt.w	80003c0 <GPIO_voidSetPinDir+0x180>
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <GPIO_voidSetPinDir+0x28>
 8000262:	2b01      	cmp	r3, #1
 8000264:	d03a      	beq.n	80002dc <GPIO_voidSetPinDir+0x9c>
				/**< RETURN ERROR STATUS */
			}
		break;
		default:
			/**< RETURN ERROR STATUS */
		break;
 8000266:	e0ab      	b.n	80003c0 <GPIO_voidSetPinDir+0x180>
			if(Copy_PIN < 8)
 8000268:	79bb      	ldrb	r3, [r7, #6]
 800026a:	2b07      	cmp	r3, #7
 800026c:	d817      	bhi.n	800029e <GPIO_voidSetPinDir+0x5e>
				GPIOA_CRL_R &= ~((0b1111) << (Copy_PIN * 4));
 800026e:	4b5a      	ldr	r3, [pc, #360]	; (80003d8 <GPIO_voidSetPinDir+0x198>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	79ba      	ldrb	r2, [r7, #6]
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	210f      	movs	r1, #15
 8000278:	fa01 f202 	lsl.w	r2, r1, r2
 800027c:	43d2      	mvns	r2, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a55      	ldr	r2, [pc, #340]	; (80003d8 <GPIO_voidSetPinDir+0x198>)
 8000282:	400b      	ands	r3, r1
 8000284:	6013      	str	r3, [r2, #0]
				GPIOA_CRL_R |= ((Copy_Mode) << (Copy_PIN * 4));
 8000286:	4b54      	ldr	r3, [pc, #336]	; (80003d8 <GPIO_voidSetPinDir+0x198>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	7979      	ldrb	r1, [r7, #5]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a50      	ldr	r2, [pc, #320]	; (80003d8 <GPIO_voidSetPinDir+0x198>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
		break;
 800029c:	e092      	b.n	80003c4 <GPIO_voidSetPinDir+0x184>
			else if(Copy_PIN < 16)
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	f200 808f 	bhi.w	80003c4 <GPIO_voidSetPinDir+0x184>
				Copy_PIN-=8;
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	3b08      	subs	r3, #8
 80002aa:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH_R &= ~((0b1111) << (Copy_PIN * 4));
 80002ac:	4b4b      	ldr	r3, [pc, #300]	; (80003dc <GPIO_voidSetPinDir+0x19c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	0092      	lsls	r2, r2, #2
 80002b4:	210f      	movs	r1, #15
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	43d2      	mvns	r2, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a47      	ldr	r2, [pc, #284]	; (80003dc <GPIO_voidSetPinDir+0x19c>)
 80002c0:	400b      	ands	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
			    GPIOA_CRH_R |= ((Copy_Mode) << (Copy_PIN * 4));
 80002c4:	4b45      	ldr	r3, [pc, #276]	; (80003dc <GPIO_voidSetPinDir+0x19c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	7979      	ldrb	r1, [r7, #5]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a41      	ldr	r2, [pc, #260]	; (80003dc <GPIO_voidSetPinDir+0x19c>)
 80002d6:	430b      	orrs	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]
		break;
 80002da:	e073      	b.n	80003c4 <GPIO_voidSetPinDir+0x184>
			if(Copy_PIN < 8)
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d817      	bhi.n	8000312 <GPIO_voidSetPinDir+0xd2>
				GPIOB_CRL_R &= ~((0b1111) << (Copy_PIN * 4));
 80002e2:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <GPIO_voidSetPinDir+0x1a0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	210f      	movs	r1, #15
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	43d2      	mvns	r2, r2
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a3a      	ldr	r2, [pc, #232]	; (80003e0 <GPIO_voidSetPinDir+0x1a0>)
 80002f6:	400b      	ands	r3, r1
 80002f8:	6013      	str	r3, [r2, #0]
				GPIOB_CRL_R |= ((Copy_Mode) << (Copy_PIN * 4));
 80002fa:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <GPIO_voidSetPinDir+0x1a0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	7979      	ldrb	r1, [r7, #5]
 8000300:	79ba      	ldrb	r2, [r7, #6]
 8000302:	0092      	lsls	r2, r2, #2
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	4611      	mov	r1, r2
 800030a:	4a35      	ldr	r2, [pc, #212]	; (80003e0 <GPIO_voidSetPinDir+0x1a0>)
 800030c:	430b      	orrs	r3, r1
 800030e:	6013      	str	r3, [r2, #0]
		break;
 8000310:	e05a      	b.n	80003c8 <GPIO_voidSetPinDir+0x188>
			else if(Copy_PIN < 16)
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2b0f      	cmp	r3, #15
 8000316:	d857      	bhi.n	80003c8 <GPIO_voidSetPinDir+0x188>
				Copy_PIN-=8;
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	3b08      	subs	r3, #8
 800031c:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH_R &=~ ((0b1111) << (Copy_PIN * 4));
 800031e:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <GPIO_voidSetPinDir+0x1a4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	79ba      	ldrb	r2, [r7, #6]
 8000324:	0092      	lsls	r2, r2, #2
 8000326:	210f      	movs	r1, #15
 8000328:	fa01 f202 	lsl.w	r2, r1, r2
 800032c:	43d2      	mvns	r2, r2
 800032e:	4611      	mov	r1, r2
 8000330:	4a2c      	ldr	r2, [pc, #176]	; (80003e4 <GPIO_voidSetPinDir+0x1a4>)
 8000332:	400b      	ands	r3, r1
 8000334:	6013      	str	r3, [r2, #0]
				GPIOB_CRH_R |= ((Copy_Mode) << (Copy_PIN * 4));
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <GPIO_voidSetPinDir+0x1a4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	7979      	ldrb	r1, [r7, #5]
 800033c:	79ba      	ldrb	r2, [r7, #6]
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	4611      	mov	r1, r2
 8000346:	4a27      	ldr	r2, [pc, #156]	; (80003e4 <GPIO_voidSetPinDir+0x1a4>)
 8000348:	430b      	orrs	r3, r1
 800034a:	6013      	str	r3, [r2, #0]
		break;
 800034c:	e03c      	b.n	80003c8 <GPIO_voidSetPinDir+0x188>
			if(Copy_PIN < 8)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2b07      	cmp	r3, #7
 8000352:	d817      	bhi.n	8000384 <GPIO_voidSetPinDir+0x144>
				GPIOC_CRL_R &=~ ((0b1111) << (Copy_PIN * 4));
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <GPIO_voidSetPinDir+0x1a8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	0092      	lsls	r2, r2, #2
 800035c:	210f      	movs	r1, #15
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	43d2      	mvns	r2, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a20      	ldr	r2, [pc, #128]	; (80003e8 <GPIO_voidSetPinDir+0x1a8>)
 8000368:	400b      	ands	r3, r1
 800036a:	6013      	str	r3, [r2, #0]
				GPIOC_CRL_R |= ((Copy_Mode) << (Copy_PIN * 4));
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <GPIO_voidSetPinDir+0x1a8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	7979      	ldrb	r1, [r7, #5]
 8000372:	79ba      	ldrb	r2, [r7, #6]
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	fa01 f202 	lsl.w	r2, r1, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <GPIO_voidSetPinDir+0x1a8>)
 800037e:	430b      	orrs	r3, r1
 8000380:	6013      	str	r3, [r2, #0]
		break;
 8000382:	e023      	b.n	80003cc <GPIO_voidSetPinDir+0x18c>
			else if(Copy_PIN < 16)
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	2b0f      	cmp	r3, #15
 8000388:	d820      	bhi.n	80003cc <GPIO_voidSetPinDir+0x18c>
				Copy_PIN-=8;
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	3b08      	subs	r3, #8
 800038e:	71bb      	strb	r3, [r7, #6]
				GPIOC_CRH_R &=~ ((0b1111) << (Copy_PIN * 4));
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <GPIO_voidSetPinDir+0x1ac>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	79ba      	ldrb	r2, [r7, #6]
 8000396:	0092      	lsls	r2, r2, #2
 8000398:	210f      	movs	r1, #15
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	43d2      	mvns	r2, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <GPIO_voidSetPinDir+0x1ac>)
 80003a4:	400b      	ands	r3, r1
 80003a6:	6013      	str	r3, [r2, #0]
				GPIOC_CRH_R |= ((Copy_Mode) << (Copy_PIN * 4));
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <GPIO_voidSetPinDir+0x1ac>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	7979      	ldrb	r1, [r7, #5]
 80003ae:	79ba      	ldrb	r2, [r7, #6]
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a0c      	ldr	r2, [pc, #48]	; (80003ec <GPIO_voidSetPinDir+0x1ac>)
 80003ba:	430b      	orrs	r3, r1
 80003bc:	6013      	str	r3, [r2, #0]
		break;
 80003be:	e005      	b.n	80003cc <GPIO_voidSetPinDir+0x18c>
		break;
 80003c0:	bf00      	nop
 80003c2:	e004      	b.n	80003ce <GPIO_voidSetPinDir+0x18e>
		break;
 80003c4:	bf00      	nop
 80003c6:	e002      	b.n	80003ce <GPIO_voidSetPinDir+0x18e>
		break;
 80003c8:	bf00      	nop
 80003ca:	e000      	b.n	80003ce <GPIO_voidSetPinDir+0x18e>
		break;
 80003cc:	bf00      	nop
	}
	/**< RETURN ERRORSTATUS */
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40010800 	.word	0x40010800
 80003dc:	40010804 	.word	0x40010804
 80003e0:	40010c00 	.word	0x40010c00
 80003e4:	40010c04 	.word	0x40010c04
 80003e8:	40011000 	.word	0x40011000
 80003ec:	40011004 	.word	0x40011004

080003f0 <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue(u8 Copy_PORT,u8 Copy_PIN, u8 Copy_Value)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	460b      	mov	r3, r1
 80003fc:	71bb      	strb	r3, [r7, #6]
 80003fe:	4613      	mov	r3, r2
 8000400:	717b      	strb	r3, [r7, #5]
	if(Copy_PIN < 16)
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	2b0f      	cmp	r3, #15
 8000406:	d867      	bhi.n	80004d8 <GPIO_voidSetPinValue+0xe8>
	{
		switch(Copy_PORT)
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b02      	cmp	r3, #2
 800040c:	d040      	beq.n	8000490 <GPIO_voidSetPinValue+0xa0>
 800040e:	2b02      	cmp	r3, #2
 8000410:	dc5b      	bgt.n	80004ca <GPIO_voidSetPinValue+0xda>
 8000412:	2b00      	cmp	r3, #0
 8000414:	d002      	beq.n	800041c <GPIO_voidSetPinValue+0x2c>
 8000416:	2b01      	cmp	r3, #1
 8000418:	d01d      	beq.n	8000456 <GPIO_voidSetPinValue+0x66>
					/**< RETURN ERROR STATUS */
				}
			break;
			default:
				/**< RETURN ERROR STATUS */
			break;
 800041a:	e056      	b.n	80004ca <GPIO_voidSetPinValue+0xda>
				if(Copy_Value == HIGH)
 800041c:	797b      	ldrb	r3, [r7, #5]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d10a      	bne.n	8000438 <GPIO_voidSetPinValue+0x48>
					SET_BIT(GPIOA_ODR_R, Copy_PIN);
 8000422:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <GPIO_voidSetPinValue+0xf4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	79ba      	ldrb	r2, [r7, #6]
 8000428:	2101      	movs	r1, #1
 800042a:	fa01 f202 	lsl.w	r2, r1, r2
 800042e:	4611      	mov	r1, r2
 8000430:	4a2c      	ldr	r2, [pc, #176]	; (80004e4 <GPIO_voidSetPinValue+0xf4>)
 8000432:	430b      	orrs	r3, r1
 8000434:	6013      	str	r3, [r2, #0]
			break;
 8000436:	e04a      	b.n	80004ce <GPIO_voidSetPinValue+0xde>
				else if(Copy_Value == LOW)
 8000438:	797b      	ldrb	r3, [r7, #5]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d147      	bne.n	80004ce <GPIO_voidSetPinValue+0xde>
					CLR_BIT(GPIOA_ODR_R, Copy_PIN);
 800043e:	4b29      	ldr	r3, [pc, #164]	; (80004e4 <GPIO_voidSetPinValue+0xf4>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	79ba      	ldrb	r2, [r7, #6]
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	43d2      	mvns	r2, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a25      	ldr	r2, [pc, #148]	; (80004e4 <GPIO_voidSetPinValue+0xf4>)
 8000450:	400b      	ands	r3, r1
 8000452:	6013      	str	r3, [r2, #0]
			break;
 8000454:	e03b      	b.n	80004ce <GPIO_voidSetPinValue+0xde>
				if(Copy_Value == HIGH)
 8000456:	797b      	ldrb	r3, [r7, #5]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d10a      	bne.n	8000472 <GPIO_voidSetPinValue+0x82>
					SET_BIT(GPIOB_ODR_R, Copy_PIN);
 800045c:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <GPIO_voidSetPinValue+0xf8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	79ba      	ldrb	r2, [r7, #6]
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <GPIO_voidSetPinValue+0xf8>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6013      	str	r3, [r2, #0]
			break;
 8000470:	e02f      	b.n	80004d2 <GPIO_voidSetPinValue+0xe2>
				else if(Copy_Value == LOW)
 8000472:	797b      	ldrb	r3, [r7, #5]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d12c      	bne.n	80004d2 <GPIO_voidSetPinValue+0xe2>
					CLR_BIT(GPIOB_ODR_R, Copy_PIN);
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <GPIO_voidSetPinValue+0xf8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	79ba      	ldrb	r2, [r7, #6]
 800047e:	2101      	movs	r1, #1
 8000480:	fa01 f202 	lsl.w	r2, r1, r2
 8000484:	43d2      	mvns	r2, r2
 8000486:	4611      	mov	r1, r2
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <GPIO_voidSetPinValue+0xf8>)
 800048a:	400b      	ands	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
			break;
 800048e:	e020      	b.n	80004d2 <GPIO_voidSetPinValue+0xe2>
				if(Copy_Value == HIGH)
 8000490:	797b      	ldrb	r3, [r7, #5]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d10a      	bne.n	80004ac <GPIO_voidSetPinValue+0xbc>
					SET_BIT(GPIOC_ODR_R, Copy_PIN);
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <GPIO_voidSetPinValue+0xfc>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	79ba      	ldrb	r2, [r7, #6]
 800049c:	2101      	movs	r1, #1
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <GPIO_voidSetPinValue+0xfc>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6013      	str	r3, [r2, #0]
			break;
 80004aa:	e014      	b.n	80004d6 <GPIO_voidSetPinValue+0xe6>
				else if(Copy_Value == LOW)
 80004ac:	797b      	ldrb	r3, [r7, #5]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d111      	bne.n	80004d6 <GPIO_voidSetPinValue+0xe6>
					CLR_BIT(GPIOC_ODR_R, Copy_PIN);
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <GPIO_voidSetPinValue+0xfc>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	79ba      	ldrb	r2, [r7, #6]
 80004b8:	2101      	movs	r1, #1
 80004ba:	fa01 f202 	lsl.w	r2, r1, r2
 80004be:	43d2      	mvns	r2, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <GPIO_voidSetPinValue+0xfc>)
 80004c4:	400b      	ands	r3, r1
 80004c6:	6013      	str	r3, [r2, #0]
			break;
 80004c8:	e005      	b.n	80004d6 <GPIO_voidSetPinValue+0xe6>
			break;
 80004ca:	bf00      	nop
 80004cc:	e004      	b.n	80004d8 <GPIO_voidSetPinValue+0xe8>
			break;
 80004ce:	bf00      	nop
 80004d0:	e002      	b.n	80004d8 <GPIO_voidSetPinValue+0xe8>
			break;
 80004d2:	bf00      	nop
 80004d4:	e000      	b.n	80004d8 <GPIO_voidSetPinValue+0xe8>
			break;
 80004d6:	bf00      	nop
	else
	{
		/**< RETURN ERROR STATUS */
	}
	/**< RETURN ERROR STATUS */
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	4001080c 	.word	0x4001080c
 80004e8:	40010c0c 	.word	0x40010c0c
 80004ec:	4001100c 	.word	0x4001100c

080004f0 <RCC_voidInitSysClock>:
#include "../Inc/RCC_config.h"
#include "../Inc/STD_TYPES.h"
#include "../Inc/BIT_MATH.h"

void RCC_voidInitSysClock(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
		RCC_CFGR = 0x00000001; 						/**< HSE selected as system clock */
	#elif	RCC_CLOCK_TYPE == RCC_HSE_RC
		RCC_CR = 0x00050000; 							/**< Enable HSE with bypass */
		RCC_CFGR = 0x00000001; 						/**< HSE selected as system clock */
	#elif	RCC_CLOCK_TYPE == RCC_HSI				
		RCC_CR = 0x00000081; 							/**< Enable HSI + Trimming = 0 */
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <RCC_voidInitSysClock+0x18>)
 80004f6:	2281      	movs	r2, #129	; 0x81
 80004f8:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000000;						/**< HSI selected as system clock */
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <RCC_voidInitSysClock+0x1c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
		RCC_CFGR|=PLLMul;
		
	#else
		#error("YOU CHOSE WRONG CLOCK TYPE!!")
	#endif
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000
 800050c:	40021004 	.word	0x40021004

08000510 <RCC_voidEnableClock>:
void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_PeriphId)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	460a      	mov	r2, r1
 800051a:	71fb      	strb	r3, [r7, #7]
 800051c:	4613      	mov	r3, r2
 800051e:	71bb      	strb	r3, [r7, #6]
		if(Copy_PeriphId <=31)
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	2b1f      	cmp	r3, #31
 8000524:	d82a      	bhi.n	800057c <RCC_voidEnableClock+0x6c>
	{
		switch(Copy_u8BusId)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d01c      	beq.n	8000566 <RCC_voidEnableClock+0x56>
 800052c:	2b02      	cmp	r3, #2
 800052e:	dc25      	bgt.n	800057c <RCC_voidEnableClock+0x6c>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <RCC_voidEnableClock+0x2a>
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00b      	beq.n	8000550 <RCC_voidEnableClock+0x40>
	}
	else
	{
		//Return Error
	}
}
 8000538:	e020      	b.n	800057c <RCC_voidEnableClock+0x6c>
			case RCC_AHB  : SET_BIT(RCC_AHBENR , Copy_PeriphId); break;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <RCC_voidEnableClock+0x78>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	79ba      	ldrb	r2, [r7, #6]
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <RCC_voidEnableClock+0x78>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e015      	b.n	800057c <RCC_voidEnableClock+0x6c>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_PeriphId); break;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <RCC_voidEnableClock+0x7c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	79ba      	ldrb	r2, [r7, #6]
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <RCC_voidEnableClock+0x7c>)
 8000560:	430b      	orrs	r3, r1
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	e00a      	b.n	800057c <RCC_voidEnableClock+0x6c>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_PeriphId); break;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <RCC_voidEnableClock+0x80>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	79ba      	ldrb	r2, [r7, #6]
 800056c:	2101      	movs	r1, #1
 800056e:	fa01 f202 	lsl.w	r2, r1, r2
 8000572:	4611      	mov	r1, r2
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <RCC_voidEnableClock+0x80>)
 8000576:	430b      	orrs	r3, r1
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	bf00      	nop
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021014 	.word	0x40021014
 800058c:	4002101c 	.word	0x4002101c
 8000590:	40021018 	.word	0x40021018

08000594 <STK_Reset>:
    /**< Stop the SysTick timer */
    STK->CTRL &= ~STK_CTRL_ENABLE_MASK;
}

void STK_Reset(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
    /**< Disable SysTick timer */
    STK->CTRL = 0;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <STK_Reset+0x2c>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
    /**< Clear the current value */
    STK->VAL = 0;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <STK_Reset+0x2c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
    /**< Set the reload value to 0 */
    STK->LOAD = 0;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <STK_Reset+0x2c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
    /**< Clear the count/interrupt flag */
    STK->CTRL &= ~STK_CTRL_COUNTFLAG_MASK;
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <STK_Reset+0x2c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <STK_Reset+0x2c>)
 80005b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b4:	6013      	str	r3, [r2, #0]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000e010 	.word	0xe000e010

080005c4 <SysTick_Handler>:
        /**< Set ErrorStatus */
    }
}

void SysTick_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    /**< Call the callback function */
    if (STK_Callback != NULL)
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <SysTick_Handler+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00e      	beq.n	80005ee <SysTick_Handler+0x2a>
    {
        if(STK_ModeOfInterval == STK_SINGLE_INTERVAL)
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <SysTick_Handler+0x34>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <SysTick_Handler+0x18>
        {
            STK_Reset();
 80005d8:	f7ff ffdc 	bl	8000594 <STK_Reset>
        }
        /**< Callback notification */
        STK_Callback();
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <SysTick_Handler+0x30>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4798      	blx	r3

        /**< Clear the count/interrupt flag */
        STK->CTRL &= ~STK_CTRL_COUNTFLAG_MASK;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SysTick_Handler+0x38>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <SysTick_Handler+0x38>)
 80005e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ec:	6013      	str	r3, [r2, #0]
    }
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000005c 	.word	0x2000005c
 80005f8:	20000060 	.word	0x20000060
 80005fc:	e000e010 	.word	0xe000e010

08000600 <main>:

	counter++;
}

int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

	RCC_voidInitSysClock();
 8000604:	f7ff ff74 	bl	80004f0 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2,RCC_APP2_IOPA_EN);
 8000608:	2102      	movs	r1, #2
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff ff80 	bl	8000510 <RCC_voidEnableClock>
	GPIO_voidSetPinDir(GPIO_PORTA, GPIO_PIN0, GPIO_OUTPUT_PP_2MHZ);
 8000610:	2202      	movs	r2, #2
 8000612:	2100      	movs	r1, #0
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff fe13 	bl	8000240 <GPIO_voidSetPinDir>



  while (1)
  {
	  GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fee6 	bl	80003f0 <GPIO_voidSetPinValue>
	  delay(500);
 8000624:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000628:	f7ff fdea 	bl	8000200 <delay>
	  GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN0, 1);
 800062c:	2201      	movs	r2, #1
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff fedd 	bl	80003f0 <GPIO_voidSetPinValue>
	  delay(500);
 8000636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063a:	f7ff fde1 	bl	8000200 <delay>
	  GPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN0, 0);
 800063e:	e7ec      	b.n	800061a <main+0x1a>

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000644:	e7fe      	b.n	8000644 <NMI_Handler+0x4>

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <MemManage_Handler+0x4>

08000652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <UsageFault_Handler+0x4>

0800065e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000690:	f7ff fff7 	bl	8000682 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000696:	490c      	ldr	r1, [pc, #48]	; (80006c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ac:	4c09      	ldr	r4, [pc, #36]	; (80006d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ba:	f000 f80f 	bl	80006dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff ff9f 	bl	8000600 <main>
  bx lr
 80006c2:	4770      	bx	lr
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006cc:	08000744 	.word	0x08000744
  ldr r2, =_sbss
 80006d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006d4:	20000064 	.word	0x20000064

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <__libc_init_array>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	2600      	movs	r6, #0
 80006e0:	4d0c      	ldr	r5, [pc, #48]	; (8000714 <__libc_init_array+0x38>)
 80006e2:	4c0d      	ldr	r4, [pc, #52]	; (8000718 <__libc_init_array+0x3c>)
 80006e4:	1b64      	subs	r4, r4, r5
 80006e6:	10a4      	asrs	r4, r4, #2
 80006e8:	42a6      	cmp	r6, r4
 80006ea:	d109      	bne.n	8000700 <__libc_init_array+0x24>
 80006ec:	f000 f81a 	bl	8000724 <_init>
 80006f0:	2600      	movs	r6, #0
 80006f2:	4d0a      	ldr	r5, [pc, #40]	; (800071c <__libc_init_array+0x40>)
 80006f4:	4c0a      	ldr	r4, [pc, #40]	; (8000720 <__libc_init_array+0x44>)
 80006f6:	1b64      	subs	r4, r4, r5
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	42a6      	cmp	r6, r4
 80006fc:	d105      	bne.n	800070a <__libc_init_array+0x2e>
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f855 3b04 	ldr.w	r3, [r5], #4
 8000704:	4798      	blx	r3
 8000706:	3601      	adds	r6, #1
 8000708:	e7ee      	b.n	80006e8 <__libc_init_array+0xc>
 800070a:	f855 3b04 	ldr.w	r3, [r5], #4
 800070e:	4798      	blx	r3
 8000710:	3601      	adds	r6, #1
 8000712:	e7f2      	b.n	80006fa <__libc_init_array+0x1e>
 8000714:	0800073c 	.word	0x0800073c
 8000718:	0800073c 	.word	0x0800073c
 800071c:	0800073c 	.word	0x0800073c
 8000720:	08000740 	.word	0x08000740

08000724 <_init>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	bf00      	nop
 8000728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800072a:	bc08      	pop	{r3}
 800072c:	469e      	mov	lr, r3
 800072e:	4770      	bx	lr

08000730 <_fini>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr
