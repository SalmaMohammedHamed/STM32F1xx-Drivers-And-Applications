
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000820  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800092c  08000934  00010934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800092c  0800092c  00010934  2**0
                  CONTENTS
  4 .ARM          00000000  0800092c  0800092c  00010934  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800092c  08000934  00010934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000934  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000934  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010934  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001095d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f9f  00000000  00000000  000109a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000739  00000000  00000000  0001193f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  00012078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001f7  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014b29  00000000  00000000  0001253f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002334  00000000  00000000  00027068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a8a7  00000000  00000000  0002939c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000874  00000000  00000000  000a3c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a44b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000914 	.word	0x08000914

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000914 	.word	0x08000914

0800014c <EXTI0_IRQHandler>:
    EXTI_callback[copy_u8Line] = ptr;
}


void EXTI0_IRQHandler (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    EXTI_callback[0]();
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <EXTI0_IRQHandler+0x1c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 0);
 8000156:	4b05      	ldr	r3, [pc, #20]	; (800016c <EXTI0_IRQHandler+0x20>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a04      	ldr	r2, [pc, #16]	; (800016c <EXTI0_IRQHandler+0x20>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
}
 8000162:	bf00      	nop
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	2000001c 	.word	0x2000001c
 800016c:	40010400 	.word	0x40010400

08000170 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    EXTI_callback[1]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI1_IRQHandler+0x1c>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 1);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI1_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI1_IRQHandler+0x20>)
 8000180:	f043 0302 	orr.w	r3, r3, #2
 8000184:	6153      	str	r3, [r2, #20]
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	2000001c 	.word	0x2000001c
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    EXTI_callback[2]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI2_IRQHandler+0x1c>)
 800019a:	689b      	ldr	r3, [r3, #8]
 800019c:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 2);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI2_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI2_IRQHandler+0x20>)
 80001a4:	f043 0304 	orr.w	r3, r3, #4
 80001a8:	6153      	str	r3, [r2, #20]
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
    EXTI_callback[3]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI3_IRQHandler+0x1c>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 3);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI3_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI3_IRQHandler+0x20>)
 80001c8:	f043 0308 	orr.w	r3, r3, #8
 80001cc:	6153      	str	r3, [r2, #20]
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
    EXTI_callback[4]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI4_IRQHandler+0x1c>)
 80001e2:	691b      	ldr	r3, [r3, #16]
 80001e4:	4798      	blx	r3
    SET_BIT(EXTI -> PR, 4);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI4_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI4_IRQHandler+0x20>)
 80001ec:	f043 0310 	orr.w	r3, r3, #16
 80001f0:	6153      	str	r3, [r2, #20]
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	40010400 	.word	0x40010400

08000200 <GPIO_voidSetPinDir>:
#include "GPIO_interface.h"
#include "GPIO_private.h"
#include "GPIO_config.h"

void GPIO_voidSetPinDir(u8 Copy_PORT, u8 Copy_PIN, u8 Copy_Mode)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
 800020a:	460b      	mov	r3, r1
 800020c:	71bb      	strb	r3, [r7, #6]
 800020e:	4613      	mov	r3, r2
 8000210:	717b      	strb	r3, [r7, #5]
	switch(Copy_PORT)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b02      	cmp	r3, #2
 8000216:	d07a      	beq.n	800030e <GPIO_voidSetPinDir+0x10e>
 8000218:	2b02      	cmp	r3, #2
 800021a:	f300 80b1 	bgt.w	8000380 <GPIO_voidSetPinDir+0x180>
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <GPIO_voidSetPinDir+0x28>
 8000222:	2b01      	cmp	r3, #1
 8000224:	d03a      	beq.n	800029c <GPIO_voidSetPinDir+0x9c>
				/**< RETURN ERROR STATUS */
			}
		break;
		default:
			/**< RETURN ERROR STATUS */
		break;
 8000226:	e0ab      	b.n	8000380 <GPIO_voidSetPinDir+0x180>
			if(Copy_PIN < 8)
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	2b07      	cmp	r3, #7
 800022c:	d817      	bhi.n	800025e <GPIO_voidSetPinDir+0x5e>
				GPIOA_CRL_R &= ~((0b1111) << (Copy_PIN * 4));
 800022e:	4b5a      	ldr	r3, [pc, #360]	; (8000398 <GPIO_voidSetPinDir+0x198>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	79ba      	ldrb	r2, [r7, #6]
 8000234:	0092      	lsls	r2, r2, #2
 8000236:	210f      	movs	r1, #15
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a55      	ldr	r2, [pc, #340]	; (8000398 <GPIO_voidSetPinDir+0x198>)
 8000242:	400b      	ands	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
				GPIOA_CRL_R |= ((Copy_Mode) << (Copy_PIN * 4));
 8000246:	4b54      	ldr	r3, [pc, #336]	; (8000398 <GPIO_voidSetPinDir+0x198>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	7979      	ldrb	r1, [r7, #5]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a50      	ldr	r2, [pc, #320]	; (8000398 <GPIO_voidSetPinDir+0x198>)
 8000258:	430b      	orrs	r3, r1
 800025a:	6013      	str	r3, [r2, #0]
		break;
 800025c:	e092      	b.n	8000384 <GPIO_voidSetPinDir+0x184>
			else if(Copy_PIN < 16)
 800025e:	79bb      	ldrb	r3, [r7, #6]
 8000260:	2b0f      	cmp	r3, #15
 8000262:	f200 808f 	bhi.w	8000384 <GPIO_voidSetPinDir+0x184>
				Copy_PIN-=8;
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	3b08      	subs	r3, #8
 800026a:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH_R &= ~((0b1111) << (Copy_PIN * 4));
 800026c:	4b4b      	ldr	r3, [pc, #300]	; (800039c <GPIO_voidSetPinDir+0x19c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	79ba      	ldrb	r2, [r7, #6]
 8000272:	0092      	lsls	r2, r2, #2
 8000274:	210f      	movs	r1, #15
 8000276:	fa01 f202 	lsl.w	r2, r1, r2
 800027a:	43d2      	mvns	r2, r2
 800027c:	4611      	mov	r1, r2
 800027e:	4a47      	ldr	r2, [pc, #284]	; (800039c <GPIO_voidSetPinDir+0x19c>)
 8000280:	400b      	ands	r3, r1
 8000282:	6013      	str	r3, [r2, #0]
			    GPIOA_CRH_R |= ((Copy_Mode) << (Copy_PIN * 4));
 8000284:	4b45      	ldr	r3, [pc, #276]	; (800039c <GPIO_voidSetPinDir+0x19c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	7979      	ldrb	r1, [r7, #5]
 800028a:	79ba      	ldrb	r2, [r7, #6]
 800028c:	0092      	lsls	r2, r2, #2
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	4611      	mov	r1, r2
 8000294:	4a41      	ldr	r2, [pc, #260]	; (800039c <GPIO_voidSetPinDir+0x19c>)
 8000296:	430b      	orrs	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
		break;
 800029a:	e073      	b.n	8000384 <GPIO_voidSetPinDir+0x184>
			if(Copy_PIN < 8)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b07      	cmp	r3, #7
 80002a0:	d817      	bhi.n	80002d2 <GPIO_voidSetPinDir+0xd2>
				GPIOB_CRL_R &= ~((0b1111) << (Copy_PIN * 4));
 80002a2:	4b3f      	ldr	r3, [pc, #252]	; (80003a0 <GPIO_voidSetPinDir+0x1a0>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	0092      	lsls	r2, r2, #2
 80002aa:	210f      	movs	r1, #15
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a3a      	ldr	r2, [pc, #232]	; (80003a0 <GPIO_voidSetPinDir+0x1a0>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	6013      	str	r3, [r2, #0]
				GPIOB_CRL_R |= ((Copy_Mode) << (Copy_PIN * 4));
 80002ba:	4b39      	ldr	r3, [pc, #228]	; (80003a0 <GPIO_voidSetPinDir+0x1a0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	7979      	ldrb	r1, [r7, #5]
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	4611      	mov	r1, r2
 80002ca:	4a35      	ldr	r2, [pc, #212]	; (80003a0 <GPIO_voidSetPinDir+0x1a0>)
 80002cc:	430b      	orrs	r3, r1
 80002ce:	6013      	str	r3, [r2, #0]
		break;
 80002d0:	e05a      	b.n	8000388 <GPIO_voidSetPinDir+0x188>
			else if(Copy_PIN < 16)
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d857      	bhi.n	8000388 <GPIO_voidSetPinDir+0x188>
				Copy_PIN-=8;
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	3b08      	subs	r3, #8
 80002dc:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH_R &=~ ((0b1111) << (Copy_PIN * 4));
 80002de:	4b31      	ldr	r3, [pc, #196]	; (80003a4 <GPIO_voidSetPinDir+0x1a4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	79ba      	ldrb	r2, [r7, #6]
 80002e4:	0092      	lsls	r2, r2, #2
 80002e6:	210f      	movs	r1, #15
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	43d2      	mvns	r2, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_voidSetPinDir+0x1a4>)
 80002f2:	400b      	ands	r3, r1
 80002f4:	6013      	str	r3, [r2, #0]
				GPIOB_CRH_R |= ((Copy_Mode) << (Copy_PIN * 4));
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <GPIO_voidSetPinDir+0x1a4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	7979      	ldrb	r1, [r7, #5]
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	0092      	lsls	r2, r2, #2
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a27      	ldr	r2, [pc, #156]	; (80003a4 <GPIO_voidSetPinDir+0x1a4>)
 8000308:	430b      	orrs	r3, r1
 800030a:	6013      	str	r3, [r2, #0]
		break;
 800030c:	e03c      	b.n	8000388 <GPIO_voidSetPinDir+0x188>
			if(Copy_PIN < 8)
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	2b07      	cmp	r3, #7
 8000312:	d817      	bhi.n	8000344 <GPIO_voidSetPinDir+0x144>
				GPIOC_CRL_R &=~ ((0b1111) << (Copy_PIN * 4));
 8000314:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <GPIO_voidSetPinDir+0x1a8>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	79ba      	ldrb	r2, [r7, #6]
 800031a:	0092      	lsls	r2, r2, #2
 800031c:	210f      	movs	r1, #15
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	43d2      	mvns	r2, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <GPIO_voidSetPinDir+0x1a8>)
 8000328:	400b      	ands	r3, r1
 800032a:	6013      	str	r3, [r2, #0]
				GPIOC_CRL_R |= ((Copy_Mode) << (Copy_PIN * 4));
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <GPIO_voidSetPinDir+0x1a8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	7979      	ldrb	r1, [r7, #5]
 8000332:	79ba      	ldrb	r2, [r7, #6]
 8000334:	0092      	lsls	r2, r2, #2
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	4611      	mov	r1, r2
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <GPIO_voidSetPinDir+0x1a8>)
 800033e:	430b      	orrs	r3, r1
 8000340:	6013      	str	r3, [r2, #0]
		break;
 8000342:	e023      	b.n	800038c <GPIO_voidSetPinDir+0x18c>
			else if(Copy_PIN < 16)
 8000344:	79bb      	ldrb	r3, [r7, #6]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d820      	bhi.n	800038c <GPIO_voidSetPinDir+0x18c>
				Copy_PIN-=8;
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	3b08      	subs	r3, #8
 800034e:	71bb      	strb	r3, [r7, #6]
				GPIOC_CRH_R &=~ ((0b1111) << (Copy_PIN * 4));
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <GPIO_voidSetPinDir+0x1ac>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	79ba      	ldrb	r2, [r7, #6]
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	210f      	movs	r1, #15
 800035a:	fa01 f202 	lsl.w	r2, r1, r2
 800035e:	43d2      	mvns	r2, r2
 8000360:	4611      	mov	r1, r2
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <GPIO_voidSetPinDir+0x1ac>)
 8000364:	400b      	ands	r3, r1
 8000366:	6013      	str	r3, [r2, #0]
				GPIOC_CRH_R |= ((Copy_Mode) << (Copy_PIN * 4));
 8000368:	4b10      	ldr	r3, [pc, #64]	; (80003ac <GPIO_voidSetPinDir+0x1ac>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	7979      	ldrb	r1, [r7, #5]
 800036e:	79ba      	ldrb	r2, [r7, #6]
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	fa01 f202 	lsl.w	r2, r1, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <GPIO_voidSetPinDir+0x1ac>)
 800037a:	430b      	orrs	r3, r1
 800037c:	6013      	str	r3, [r2, #0]
		break;
 800037e:	e005      	b.n	800038c <GPIO_voidSetPinDir+0x18c>
		break;
 8000380:	bf00      	nop
 8000382:	e004      	b.n	800038e <GPIO_voidSetPinDir+0x18e>
		break;
 8000384:	bf00      	nop
 8000386:	e002      	b.n	800038e <GPIO_voidSetPinDir+0x18e>
		break;
 8000388:	bf00      	nop
 800038a:	e000      	b.n	800038e <GPIO_voidSetPinDir+0x18e>
		break;
 800038c:	bf00      	nop
	}
	/**< RETURN ERRORSTATUS */
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40010800 	.word	0x40010800
 800039c:	40010804 	.word	0x40010804
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	40010c04 	.word	0x40010c04
 80003a8:	40011000 	.word	0x40011000
 80003ac:	40011004 	.word	0x40011004

080003b0 <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue(u8 Copy_PORT,u8 Copy_PIN, u8 Copy_Value)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	460b      	mov	r3, r1
 80003bc:	71bb      	strb	r3, [r7, #6]
 80003be:	4613      	mov	r3, r2
 80003c0:	717b      	strb	r3, [r7, #5]
	if(Copy_PIN < 16)
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	2b0f      	cmp	r3, #15
 80003c6:	d867      	bhi.n	8000498 <GPIO_voidSetPinValue+0xe8>
	{
		switch(Copy_PORT)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d040      	beq.n	8000450 <GPIO_voidSetPinValue+0xa0>
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	dc5b      	bgt.n	800048a <GPIO_voidSetPinValue+0xda>
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <GPIO_voidSetPinValue+0x2c>
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d01d      	beq.n	8000416 <GPIO_voidSetPinValue+0x66>
					/**< RETURN ERROR STATUS */
				}
			break;
			default:
				/**< RETURN ERROR STATUS */
			break;
 80003da:	e056      	b.n	800048a <GPIO_voidSetPinValue+0xda>
				if(Copy_Value == HIGH)
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d10a      	bne.n	80003f8 <GPIO_voidSetPinValue+0x48>
					SET_BIT(GPIOA_ODR_R, Copy_PIN);
 80003e2:	4b30      	ldr	r3, [pc, #192]	; (80004a4 <GPIO_voidSetPinValue+0xf4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a2c      	ldr	r2, [pc, #176]	; (80004a4 <GPIO_voidSetPinValue+0xf4>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6013      	str	r3, [r2, #0]
			break;
 80003f6:	e04a      	b.n	800048e <GPIO_voidSetPinValue+0xde>
				else if(Copy_Value == LOW)
 80003f8:	797b      	ldrb	r3, [r7, #5]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d147      	bne.n	800048e <GPIO_voidSetPinValue+0xde>
					CLR_BIT(GPIOA_ODR_R, Copy_PIN);
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <GPIO_voidSetPinValue+0xf4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	43d2      	mvns	r2, r2
 800040c:	4611      	mov	r1, r2
 800040e:	4a25      	ldr	r2, [pc, #148]	; (80004a4 <GPIO_voidSetPinValue+0xf4>)
 8000410:	400b      	ands	r3, r1
 8000412:	6013      	str	r3, [r2, #0]
			break;
 8000414:	e03b      	b.n	800048e <GPIO_voidSetPinValue+0xde>
				if(Copy_Value == HIGH)
 8000416:	797b      	ldrb	r3, [r7, #5]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d10a      	bne.n	8000432 <GPIO_voidSetPinValue+0x82>
					SET_BIT(GPIOB_ODR_R, Copy_PIN);
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <GPIO_voidSetPinValue+0xf8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <GPIO_voidSetPinValue+0xf8>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6013      	str	r3, [r2, #0]
			break;
 8000430:	e02f      	b.n	8000492 <GPIO_voidSetPinValue+0xe2>
				else if(Copy_Value == LOW)
 8000432:	797b      	ldrb	r3, [r7, #5]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d12c      	bne.n	8000492 <GPIO_voidSetPinValue+0xe2>
					CLR_BIT(GPIOB_ODR_R, Copy_PIN);
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <GPIO_voidSetPinValue+0xf8>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	79ba      	ldrb	r2, [r7, #6]
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <GPIO_voidSetPinValue+0xf8>)
 800044a:	400b      	ands	r3, r1
 800044c:	6013      	str	r3, [r2, #0]
			break;
 800044e:	e020      	b.n	8000492 <GPIO_voidSetPinValue+0xe2>
				if(Copy_Value == HIGH)
 8000450:	797b      	ldrb	r3, [r7, #5]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d10a      	bne.n	800046c <GPIO_voidSetPinValue+0xbc>
					SET_BIT(GPIOC_ODR_R, Copy_PIN);
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <GPIO_voidSetPinValue+0xfc>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	79ba      	ldrb	r2, [r7, #6]
 800045c:	2101      	movs	r1, #1
 800045e:	fa01 f202 	lsl.w	r2, r1, r2
 8000462:	4611      	mov	r1, r2
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <GPIO_voidSetPinValue+0xfc>)
 8000466:	430b      	orrs	r3, r1
 8000468:	6013      	str	r3, [r2, #0]
			break;
 800046a:	e014      	b.n	8000496 <GPIO_voidSetPinValue+0xe6>
				else if(Copy_Value == LOW)
 800046c:	797b      	ldrb	r3, [r7, #5]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d111      	bne.n	8000496 <GPIO_voidSetPinValue+0xe6>
					CLR_BIT(GPIOC_ODR_R, Copy_PIN);
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <GPIO_voidSetPinValue+0xfc>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	43d2      	mvns	r2, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <GPIO_voidSetPinValue+0xfc>)
 8000484:	400b      	ands	r3, r1
 8000486:	6013      	str	r3, [r2, #0]
			break;
 8000488:	e005      	b.n	8000496 <GPIO_voidSetPinValue+0xe6>
			break;
 800048a:	bf00      	nop
 800048c:	e004      	b.n	8000498 <GPIO_voidSetPinValue+0xe8>
			break;
 800048e:	bf00      	nop
 8000490:	e002      	b.n	8000498 <GPIO_voidSetPinValue+0xe8>
			break;
 8000492:	bf00      	nop
 8000494:	e000      	b.n	8000498 <GPIO_voidSetPinValue+0xe8>
			break;
 8000496:	bf00      	nop
	else
	{
		/**< RETURN ERROR STATUS */
	}
	/**< RETURN ERROR STATUS */
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	4001080c 	.word	0x4001080c
 80004a8:	40010c0c 	.word	0x40010c0c
 80004ac:	4001100c 	.word	0x4001100c

080004b0 <GPIO_voidSetPortValue>:
	return Local_u8ReturnPinValue;
}


void GPIO_voidSetPortValue(u8 Copy_PORT ,u32 Copy_Value)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	6039      	str	r1, [r7, #0]
 80004ba:	71fb      	strb	r3, [r7, #7]
	switch(Copy_PORT)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d00e      	beq.n	80004e0 <GPIO_voidSetPortValue+0x30>
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	dc10      	bgt.n	80004e8 <GPIO_voidSetPortValue+0x38>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d002      	beq.n	80004d0 <GPIO_voidSetPortValue+0x20>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d004      	beq.n	80004d8 <GPIO_voidSetPortValue+0x28>
	{
		case GPIO_PORTA: GPIOA_ODR_R=Copy_Value; break;
		case GPIO_PORTB: GPIOB_ODR_R=Copy_Value; break;
		case GPIO_PORTC: GPIOC_ODR_R=Copy_Value; break;
	}
}
 80004ce:	e00b      	b.n	80004e8 <GPIO_voidSetPortValue+0x38>
		case GPIO_PORTA: GPIOA_ODR_R=Copy_Value; break;
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <GPIO_voidSetPortValue+0x44>)
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	6013      	str	r3, [r2, #0]
 80004d6:	e007      	b.n	80004e8 <GPIO_voidSetPortValue+0x38>
		case GPIO_PORTB: GPIOB_ODR_R=Copy_Value; break;
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <GPIO_voidSetPortValue+0x48>)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	6013      	str	r3, [r2, #0]
 80004de:	e003      	b.n	80004e8 <GPIO_voidSetPortValue+0x38>
		case GPIO_PORTC: GPIOC_ODR_R=Copy_Value; break;
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <GPIO_voidSetPortValue+0x4c>)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	bf00      	nop
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	4001080c 	.word	0x4001080c
 80004f8:	40010c0c 	.word	0x40010c0c
 80004fc:	4001100c 	.word	0x4001100c

08000500 <LCD_voidSendCommand>:
#include "SysTick_interface.h"
#include "Lcd_Interface.h"
#include "Lcd_Private.h"
#include "Lcd_config.h"
void LCD_voidSendCommand(u8 command)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]

	//set the RS value as Low (command =>RS =  0 )
		GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,Low);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2001      	movs	r0, #1
 8000510:	f7ff ff4e 	bl	80003b0 <GPIO_voidSetPinValue>
	//set the RW value as Low (Write  => RW = 0 )
		GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
 8000514:	2200      	movs	r2, #0
 8000516:	2101      	movs	r1, #1
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ff49 	bl	80003b0 <GPIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
 800051e:	2201      	movs	r2, #1
 8000520:	2103      	movs	r1, #3
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff ff44 	bl	80003b0 <GPIO_voidSetPinValue>
	//Send Command
		GPIO_voidSetPortValue(Lcd_DCGroup,command);
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4619      	mov	r1, r3
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff ffbf 	bl	80004b0 <GPIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
 8000532:	2200      	movs	r2, #0
 8000534:	2103      	movs	r1, #3
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff ff3a 	bl	80003b0 <GPIO_voidSetPinValue>


}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]

	//set the RS value as Low (Data =>RS =  1 )
	GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,High);
 800054e:	2201      	movs	r2, #1
 8000550:	2100      	movs	r1, #0
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff ff2c 	bl	80003b0 <GPIO_voidSetPinValue>
	//set the RW vlaue as Low (Write  => RW = 0 )
	GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ff27 	bl	80003b0 <GPIO_voidSetPinValue>
	//set the E Value as High (High CLK)
	GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
 8000562:	2201      	movs	r2, #1
 8000564:	2103      	movs	r1, #3
 8000566:	2001      	movs	r0, #1
 8000568:	f7ff ff22 	bl	80003b0 <GPIO_voidSetPinValue>
	//Send Data
	GPIO_voidSetPortValue(Lcd_DCGroup,data);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4619      	mov	r1, r3
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ff9d 	bl	80004b0 <GPIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
	GPIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
 8000576:	2200      	movs	r2, #0
 8000578:	2103      	movs	r1, #3
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff ff18 	bl	80003b0 <GPIO_voidSetPinValue>


}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <LCD_voidInit>:


void LCD_voidInit()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	//set Direction
	//all portA output
	GPIO_voidSetPinDir(Lcd_ControlGroup, Lcd_RsPin, GPIO_OUTPUT_PP_10MHZ);
 800058c:	2201      	movs	r2, #1
 800058e:	2100      	movs	r1, #0
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff fe35 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_ControlGroup, Lcd_RwPin, GPIO_OUTPUT_PP_10MHZ);
 8000596:	2201      	movs	r2, #1
 8000598:	2101      	movs	r1, #1
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff fe30 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_ControlGroup, Lcd_EPin, GPIO_OUTPUT_PP_10MHZ);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2103      	movs	r1, #3
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff fe2b 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 0, GPIO_OUTPUT_PP_10MHZ);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2100      	movs	r1, #0
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff fe26 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 1, GPIO_OUTPUT_PP_10MHZ);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff fe21 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 2, GPIO_OUTPUT_PP_10MHZ);
 80005be:	2201      	movs	r2, #1
 80005c0:	2102      	movs	r1, #2
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fe1c 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 3, GPIO_OUTPUT_PP_10MHZ);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2103      	movs	r1, #3
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff fe17 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 4, GPIO_OUTPUT_PP_10MHZ);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2104      	movs	r1, #4
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fe12 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 5, GPIO_OUTPUT_PP_10MHZ);
 80005dc:	2201      	movs	r2, #1
 80005de:	2105      	movs	r1, #5
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff fe0d 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 6, GPIO_OUTPUT_PP_10MHZ);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2106      	movs	r1, #6
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff fe08 	bl	8000200 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(Lcd_DCGroup, 7, GPIO_OUTPUT_PP_10MHZ);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2107      	movs	r1, #7
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fe03 	bl	8000200 <GPIO_voidSetPinDir>
	//wait for 30ms
	STK_SetBusyWait(16000000);
 80005fa:	481a      	ldr	r0, [pc, #104]	; (8000664 <LCD_voidInit+0xdc>)
 80005fc:	f000 f8b8 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 8000600:	4818      	ldr	r0, [pc, #96]	; (8000664 <LCD_voidInit+0xdc>)
 8000602:	f000 f8b5 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <LCD_voidInit+0xdc>)
 8000608:	f000 f8b2 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 800060c:	4815      	ldr	r0, [pc, #84]	; (8000664 <LCD_voidInit+0xdc>)
 800060e:	f000 f8af 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <LCD_voidInit+0xdc>)
 8000614:	f000 f8ac 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <LCD_voidInit+0xdc>)
 800061a:	f000 f8a9 	bl	8000770 <STK_SetBusyWait>
	//sent the Function set
	LCD_voidSendCommand(LCD_Set8Bit2Line5x8);
 800061e:	2038      	movs	r0, #56	; 0x38
 8000620:	f7ff ff6e 	bl	8000500 <LCD_voidSendCommand>
	//wait for 39us
	STK_SetBusyWait(16000000);
 8000624:	480f      	ldr	r0, [pc, #60]	; (8000664 <LCD_voidInit+0xdc>)
 8000626:	f000 f8a3 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <LCD_voidInit+0xdc>)
 800062c:	f000 f8a0 	bl	8000770 <STK_SetBusyWait>
	//sent the display
	LCD_voidSendCommand(LCD_8BitCursorBlinkON);
 8000630:	200f      	movs	r0, #15
 8000632:	f7ff ff65 	bl	8000500 <LCD_voidSendCommand>
	//wait for 39us
	STK_SetBusyWait(16000000);
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <LCD_voidInit+0xdc>)
 8000638:	f000 f89a 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <LCD_voidInit+0xdc>)
 800063e:	f000 f897 	bl	8000770 <STK_SetBusyWait>
	//sent the Clear
	LCD_voidSendCommand(LCD_8BitClearDisplay);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff ff5c 	bl	8000500 <LCD_voidSendCommand>
	//wait for 1.53ms
	STK_SetBusyWait(16000000);
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <LCD_voidInit+0xdc>)
 800064a:	f000 f891 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <LCD_voidInit+0xdc>)
 8000650:	f000 f88e 	bl	8000770 <STK_SetBusyWait>
	STK_SetBusyWait(16000000);
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <LCD_voidInit+0xdc>)
 8000656:	f000 f88b 	bl	8000770 <STK_SetBusyWait>
	//sent the EntryMode
	LCD_voidSendCommand(LCD_8BitEntryMode1);
 800065a:	2006      	movs	r0, #6
 800065c:	f7ff ff50 	bl	8000500 <LCD_voidSendCommand>


}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	00f42400 	.word	0x00f42400

08000668 <RCC_voidInitSysClock>:
#include "../Inc/RCC_config.h"
#include "../Inc/STD_TYPES.h"
#include "../Inc/BIT_MATH.h"

void RCC_voidInitSysClock(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
		RCC_CFGR = 0x00000001; 						/**< HSE selected as system clock */
	#elif	RCC_CLOCK_TYPE == RCC_HSE_RC
		RCC_CR = 0x00050000; 							/**< Enable HSE with bypass */
		RCC_CFGR = 0x00000001; 						/**< HSE selected as system clock */
	#elif	RCC_CLOCK_TYPE == RCC_HSI				
		RCC_CR = 0x00000081; 							/**< Enable HSI + Trimming = 0 */
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <RCC_voidInitSysClock+0x18>)
 800066e:	2281      	movs	r2, #129	; 0x81
 8000670:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000000;						/**< HSI selected as system clock */
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <RCC_voidInitSysClock+0x1c>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
		RCC_CFGR|=PLLMul;
		
	#else
		#error("YOU CHOSE WRONG CLOCK TYPE!!")
	#endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000
 8000684:	40021004 	.word	0x40021004

08000688 <RCC_voidEnableClock>:
void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_PeriphId)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
		if(Copy_PeriphId <=31)
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	2b1f      	cmp	r3, #31
 800069c:	d82a      	bhi.n	80006f4 <RCC_voidEnableClock+0x6c>
	{
		switch(Copy_u8BusId)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d01c      	beq.n	80006de <RCC_voidEnableClock+0x56>
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	dc25      	bgt.n	80006f4 <RCC_voidEnableClock+0x6c>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <RCC_voidEnableClock+0x2a>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d00b      	beq.n	80006c8 <RCC_voidEnableClock+0x40>
	}
	else
	{
		//Return Error
	}
}
 80006b0:	e020      	b.n	80006f4 <RCC_voidEnableClock+0x6c>
			case RCC_AHB  : SET_BIT(RCC_AHBENR , Copy_PeriphId); break;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <RCC_voidEnableClock+0x78>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	79ba      	ldrb	r2, [r7, #6]
 80006b8:	2101      	movs	r1, #1
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	4611      	mov	r1, r2
 80006c0:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <RCC_voidEnableClock+0x78>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	e015      	b.n	80006f4 <RCC_voidEnableClock+0x6c>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_PeriphId); break;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <RCC_voidEnableClock+0x7c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f202 	lsl.w	r2, r1, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <RCC_voidEnableClock+0x7c>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e00a      	b.n	80006f4 <RCC_voidEnableClock+0x6c>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_PeriphId); break;
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <RCC_voidEnableClock+0x80>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	79ba      	ldrb	r2, [r7, #6]
 80006e4:	2101      	movs	r1, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <RCC_voidEnableClock+0x80>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	bf00      	nop
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021014 	.word	0x40021014
 8000704:	4002101c 	.word	0x4002101c
 8000708:	40021018 	.word	0x40021018

0800070c <STK_Init>:

static void (*STK_Callback)(void) = NULL;
static u8 STK_ModeOfInterval;

void STK_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

    STK->CTRL &= ~STK_CTRL_ENABLE_MASK;//Disable SysTick timer
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <STK_Init+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <STK_Init+0x30>)
 8000716:	f023 0301 	bic.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]

    /* Configure SysTick timer to use the processor clock */
    #if STK_CTRL_CLKSOURCE == STK_CTRL_CLKSOURCE_1
        STK -> CTRL |= STK_CTRL_CLKSOURCE_MASK;     // Set bit 2 to use the processor clock
    #elif STK_CTRL_CLKSOURCE == STK_CTRL_CLKSOURCE_8
        STK->CTRL &= ~STK_CTRL_CLKSOURCE_MASK;      // Clear bit 2 to use the processor clock/8
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <STK_Init+0x30>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <STK_Init+0x30>)
 8000722:	f023 0304 	bic.w	r3, r3, #4
 8000726:	6013      	str	r3, [r2, #0]
        #error "WRONG CHOICE FOR SYSTICK CLOCK SOURCE"
    #endif

    /**< Generate interrupt when it reaches zero */
    #if STK_CTRL_TICKINT == STK_CTRL_TICKINT_ENABLE
        STK->CTRL |= STK_CTRL_TICKINT_MASK;      /**< Set bit 1 to enable interrupt when the counter reaches zero */
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <STK_Init+0x30>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <STK_Init+0x30>)
 800072e:	f043 0302 	orr.w	r3, r3, #2
 8000732:	6013      	str	r3, [r2, #0]
    #elif STK_CTRL_TICKINT == STK_CTRL_TICKINT_DISABLE
        STK->CTRL &= ~STK_CTRL_TICKINT_MASK;      /**< Clear bit 1 to enable interrupt when the counter reaches zero */
    #else
        #error "WRONG OPTION"
    #endif
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	e000e010 	.word	0xe000e010

08000740 <STK_Reset>:
    /**< Stop the SysTick timer */
    STK->CTRL &= ~STK_CTRL_ENABLE_MASK;
}

void STK_Reset(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
    /**< Disable SysTick timer */
    STK->CTRL = 0;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <STK_Reset+0x2c>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
    /**< Clear the current value */
    STK->VAL = 0;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <STK_Reset+0x2c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
    /**< Set the reload value to 0 */
    STK->LOAD = 0;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <STK_Reset+0x2c>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
    /**< Clear the count/interrupt flag */
    STK->CTRL &= ~STK_CTRL_COUNTFLAG_MASK;
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <STK_Reset+0x2c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <STK_Reset+0x2c>)
 800075c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <STK_SetBusyWait>:

    return Local_u32ElapsedTicks;
}

void STK_SetBusyWait(u32 Copy_Microseconds)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    /**< Calculate the number of ticks required to wait for the specified number of microseconds */
    u32 Local_u32Ticks = (Copy_Microseconds * STK_AHB_CLK) / 1000000;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <STK_SetBusyWait+0x50>)
 800077c:	fb02 f303 	mul.w	r3, r2, r3
 8000780:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <STK_SetBusyWait+0x54>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	0c9b      	lsrs	r3, r3, #18
 8000788:	60fb      	str	r3, [r7, #12]

    /**< Wait for the specified number of ticks using the SysTick timer */
    STK->LOAD = Local_u32Ticks;
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <STK_SetBusyWait+0x58>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6053      	str	r3, [r2, #4]
    STK->CTRL |= STK_CTRL_ENABLE_MASK;              /**< Enable SysTick timer */
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <STK_SetBusyWait+0x58>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <STK_SetBusyWait+0x58>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	6013      	str	r3, [r2, #0]
    while (!(STK->CTRL & STK_CTRL_COUNTFLAG_MASK)); /**< Wait until the SysTick timer reach to zero */
 800079c:	bf00      	nop
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <STK_SetBusyWait+0x58>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0f9      	beq.n	800079e <STK_SetBusyWait+0x2e>
    STK->CTRL &= ~STK_CTRL_ENABLE_MASK;             /**< Disable SysTick timer */
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <STK_SetBusyWait+0x58>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <STK_SetBusyWait+0x58>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	000f4240 	.word	0x000f4240
 80007c4:	431bde83 	.word	0x431bde83
 80007c8:	e000e010 	.word	0xe000e010

080007cc <SysTick_Handler>:
        /**< Set ErrorStatus */
    }
}

void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    /**< Call the callback function */
    if (STK_Callback != NULL)
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <SysTick_Handler+0x30>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00e      	beq.n	80007f6 <SysTick_Handler+0x2a>
    {
        if(STK_ModeOfInterval == STK_SINGLE_INTERVAL)
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <SysTick_Handler+0x34>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <SysTick_Handler+0x18>
        {
            STK_Reset();
 80007e0:	f7ff ffae 	bl	8000740 <STK_Reset>
        }
        /**< Callback notification */
        STK_Callback();
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Handler+0x30>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4798      	blx	r3

        /**< Clear the count/interrupt flag */
        STK->CTRL &= ~STK_CTRL_COUNTFLAG_MASK;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SysTick_Handler+0x38>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SysTick_Handler+0x38>)
 80007f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f4:	6013      	str	r3, [r2, #0]
    }
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000005c 	.word	0x2000005c
 8000800:	20000060 	.word	0x20000060
 8000804:	e000e010 	.word	0xe000e010

08000808 <main>:

	counter++;
}

int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

	RCC_voidInitSysClock();
 800080c:	f7ff ff2c 	bl	8000668 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2,RCC_APP2_IOPA_EN);
 8000810:	2102      	movs	r1, #2
 8000812:	2002      	movs	r0, #2
 8000814:	f7ff ff38 	bl	8000688 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,RCC_APP2_IOPB_EN);
 8000818:	2103      	movs	r1, #3
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff34 	bl	8000688 <RCC_voidEnableClock>
	STK_Init();
 8000820:	f7ff ff74 	bl	800070c <STK_Init>
	LCD_voidInit();
 8000824:	f7ff feb0 	bl	8000588 <LCD_voidInit>
	LCD_voidSendData('a');
 8000828:	2061      	movs	r0, #97	; 0x61
 800082a:	f7ff fe8b 	bl	8000544 <LCD_voidSendData>

  while (1)
 800082e:	e7fe      	b.n	800082e <main+0x26>

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff fff7 	bl	8000872 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000886:	490c      	ldr	r1, [pc, #48]	; (80008b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000888:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800089c:	4c09      	ldr	r4, [pc, #36]	; (80008c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f000 f80f 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff ffab 	bl	8000808 <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008bc:	08000934 	.word	0x08000934
  ldr r2, =_sbss
 80008c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008c4:	20000064 	.word	0x20000064

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	2600      	movs	r6, #0
 80008d0:	4d0c      	ldr	r5, [pc, #48]	; (8000904 <__libc_init_array+0x38>)
 80008d2:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__libc_init_array+0x3c>)
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	f000 f81a 	bl	8000914 <_init>
 80008e0:	2600      	movs	r6, #0
 80008e2:	4d0a      	ldr	r5, [pc, #40]	; (800090c <__libc_init_array+0x40>)
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <__libc_init_array+0x44>)
 80008e6:	1b64      	subs	r4, r4, r5
 80008e8:	10a4      	asrs	r4, r4, #2
 80008ea:	42a6      	cmp	r6, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f4:	4798      	blx	r3
 80008f6:	3601      	adds	r6, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fe:	4798      	blx	r3
 8000900:	3601      	adds	r6, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	0800092c 	.word	0x0800092c
 8000908:	0800092c 	.word	0x0800092c
 800090c:	0800092c 	.word	0x0800092c
 8000910:	08000930 	.word	0x08000930

08000914 <_init>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr

08000920 <_fini>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	bf00      	nop
 8000924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000926:	bc08      	pop	{r3}
 8000928:	469e      	mov	lr, r3
 800092a:	4770      	bx	lr
